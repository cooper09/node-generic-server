var SchemaObject = require('schema-object');

/**
Audio
 This object represents an audio type impression. Many of the fields are non-essential for minimally viable transactions, but are included to offer fine control when needed. Audio in OpenRTB generally assumes compliance with the DAAST standard. As such, the notion of companion ads is supported by optionally including an array of Banner objects (refer to the Banner object in Section 3.2.3) that define these companion ads.

 The presence of a Audio as a subordinate of the Imp object indicates that this impression is offered as an audio type impression. At the publisherâ€™s discretion, that same impression may also be offered as banner, video, and/or native by also including as Imp subordinates objects of those types. However, any given bid for the impression must conform to one of the offered types.
*/

var Banner = require('./banner');

var enums = require('../enums');
var CreativeAttribute = enums.CreativeAttribute;
var Protocols = enums.Protocols;
var ContentDeliverMethod = enums.ContentDeliverMethod;
var CompanionType = enums.CompanionType;
var APIFrameworks = enums.APIFrameworks;


var definition = {
  mimes:        [ { type: String, minLength: 1} ],
  delivery:     [ { type: String } ],
  minduration:  { type: Number },
  maxduration:  { type: Number },
  startdelay:   { type: Number },
  sequence:     { type: Number },
  maxextended:  { type: Number },
  minbitrate:   { type: Number },
  maxbitrate:   { type: Number },
  maxseq:       { type: Number },
  feed:         { type: Number },
  stitched:     { type: Number },
  nvol:         { type: Number },
  stitched:     { type: Boolean },
  api:          [ { type: Number, enum: APIFrameworks.values() } ],
  protocols:    [ { type: Number, enum: Protocols.values() } ],
  battr:        [ { type: Number, enum: CreativeAttribute.values() } ],
  delivery:     [ { type: Number, enum: ContentDeliverMethod.values() } ],
  companiontype:[ { type: Number, enum: CompanionType.values() } ],
  companionad:  [ { type: Banner.definition } ],
  ext:          { type: 'any' }
};

module.exports.definition = definition;
module.exports.schema = new SchemaObject(definition);

